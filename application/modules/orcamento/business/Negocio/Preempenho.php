<?php

/**
 * Contém regras negociais específicas desta funcionalidade
 *
 * e-Admin
 * e-Orçamento
 * Business - Negócio
 *
 * @author Gesley B. Rodrigues <rodrigues.gesley@gmail.com>
 */

/**
 * Contém as regras negociais sobre pré empenho
 *
 * @category Orcamento
 * @package Orcamento_Business_Negocio_pré empenho
 * @author Gesley B. Rodrigues <rodrigues.gesley@gmail.com>
 * @license Creative Commons Atribuição 3.0 não adaptada
 *          <http://creativecommons.org/licenses/by/3.0/deed.pt_BR>
 * @ignore Este código é livre para uso dentro do TRF! Fora do TRF pode apenas
 *         servir como fonte de estudo ou base para futuros códigos-fonte sem
 *         nenhuma restrição, salvo pelas informações de @copyright e @author
 *         que devem ser mantidas inalteradas.
 * @copyright Tribunal Regional Federal ©2007-2014 <http://www.trf1.jus.br>
 */
class Orcamento_Business_Negocio_Preempenho extends Orcamento_Business_Negocio_Base {

    /**
     * Iniciador chamado no final do método construtor {@link __construct()}
     *
     * @author Gesley B. Rodrigues <rodrigues.gesley@gmail.com>
     */
    public function init() {
        // Instancia a classe model
        $this->_model = new Orcamento_Model_DbTable_Preemp ();

        // Define a negocio
        $this->_negocio = 'preempenho';
    }

    /**
     * Tratamento dos dados antes da inclusão
     * @param array $dados dados do preempenho
     * @return array
     */
    public function incluir($dados) {
        Zend_Debug::dump($dados);

        return parent::incluir($dados); // TODO: Change the autogenerated stub
    }

    /**
     * Configura a data para o formado banco oracle
     * @param $data date
     * @return Zend_Db_Expr data no formato oracle
     */
    public function trataData($data) {
        $arrayData = array(
            'ANO' => substr($data, 0, 4),
            'MES' => substr($data, 4, 2),
            'DIA' => substr($data, 6, 2),
            'HH' => substr($data, 8, 2),
            'MM' => substr($data, 10, 2),
            'SS' => '00'
        );

        $newData = $arrayData['DIA'] . "/" . $arrayData['MES'] . "/" . $arrayData['ANO'] . " " . $arrayData['HH'] . ":" . $arrayData['MM'] . ":" . $arrayData['SS'];
        $objOracle = new Zend_Db_Expr("TO_DATE('" . $newData . "','DD/MM/YYYY HH24:MI:SS')");

        return $objOracle;
    }

    /**
     *
     * @todo finalizar
     *
     * */
    public function trataEvento($evento) {
        $sql = " SELECT EVEN_CD_EVENTO FROM CEO_TB_EVEN_EVENTO_NE WHERE EVEN_CD_EVENTO = $evento ";
        $banco = Zend_Db_Table::getDefaultAdapter();
        $dados = $banco->fetchRow($sql);
    }

    /**
     * Retorna os campos para serem incluídos na instrução sql para retorno de
     * dados desta classe
     *
     * @param string $acao
     *        Nome ada ação (action) em questão
     * @return string
     * @author Gesley B. Rodrigues <rodrigues.gesley@gmail.com>
     */
    public function retornaCampos($acao = 'todos') {
        // Campos para a serem apresentados na indexAction
        $campos ['todos'] = " * ";

        // Campos para a serem apresentados na indexAction
        $campos ['index'] = " * ";

        // Campos para a serem apresentados na editarAction
        $campos ['editar'] = $campos ['index'];

        // Campos para a serem apresentados na detalheAction
        $campos ['detalhe'] = "
PRMP_ID_PREEMPENHO                  AS \"Código\",
PRMP_DT_ANO                         AS \"Ano\",
PRMP_CD_UG_OPERADOR                          AS \"UG\",
PRMP_CD_NOTA_EMPENHO                AS \"Pré Empenho\",
PRMP_CD_DESPESA                     AS \"Despesa\",
PRMP_CD_PT_RESUMIDO                 AS \"PTRES\",
PRMP_CD_ELEMENTO_DESPESA_SUB        AS \"Natureza da despesa\",
PRMP_DT_EMISSAO                     AS \"Emissão\",
PRMP_DS_DESCRICAO                   AS \"Descrição\",
PRMP_CD_PROCESSO                    AS \"Processo\",
PRMP_CD_EVENTO                      AS \"Evento\",
PRMP_VL_VALOR                       AS \"Valor\",
PRMP_IC_ACERTADO_MANUALMENTE        AS \"Acertado manualmente\"
                                ";

        // Campos para a serem apresentados na excluirAction
        $campos ['excluir'] = "PRMP_ID_PREEMPENHO, ";
        $campos ['excluir'] .= $campos ['detalhe'];

        // Campos para a serem apresentados na restaurarAction
        $campos ['restaurar'] = $campos ['excluir'];

        // Campos para a serem apresentados num combo
        $campos ['combo'] = " * ";

        // Devolve os campos, conforme ação
        return $campos [$acao];
    }

    /**
     * Retorna as condições restritivas, se houver para a montagem da instrução
     * sql.
     *
     * @param string $acao
     *        Nome da ação (action) em questão
     * @param string $chaves
     *        Informa a chave, já tratada, se for o caso
     * @return string
     * @author Gesley B. Rodrigues <rodrigues.gesley@gmail.com>
     */
    public function retornaRestricoes($acao = 'todos', $chaves = null) {
        // Condição para ação editar
        $restricao ['detalhe'] = " AND PRMP_ID_PREEMPENHO IN ( $chaves ) ";

        // Condição para ação editar
        $restricao ['editar'] = $restricao ['detalhe'];

        // Condição para ação excluir
        $restricao ['excluir'] = $restricao ['detalhe'];

        // Condição para ação restaurar
        $restricao ['restaurar'] = $restricao ['detalhe'];

        // Condição para montagem do combo
        $restricao ['combo'] = " PRMP_DT_EXCLUSAO_LOGICA IS Null ";

        return $restricao [$acao];
    }

    /**
     * Realiza a exclusão lógica de uma ou mais pré empenhos
     *
     * @param array $chaves
     *        Chaves primárias (ou composta) para exclusão de um ou mais
     *        registros
     * @author Gesley B. Rodrigues <rodrigues.gesley@gmail.com>
     */
    public function retornaSqlExclusaoLogica($chaves) {
        // Retorna a matrícula do usuário logado
        $matricula = $this->retornaMatricula();

        // Trata a chave primária (ou composta)
        $preempenhos = $this->separaChave($chaves);

        // Exclui um ou mais registros
        $sql = "
UPDATE
    CEO_TB_PRMP_PREEMPENHO
SET
    PRMP_CD_MATRICULA_EXCLUSAO          = '$matricula',
    PRMP_DT_EXCLUSAO_LOGICA             = SYSDATE
WHERE
    PRMP_ID_PREEMPENHO                  IN ( $preempenhos ) AND
    PRMP_DT_EXCLUSAO_LOGICA             IS Null
                ";

        // Devolve a instrução sql para exclusão lógica
        return $sql;
    }

    /**
     * Restaura um ou mais registros logicamente excluídos
     *
     * @param array $chaves
     *        Chaves primárias (ou composta) para restauração de um ou mais
     *        registros
     * @author Gesley B. Rodrigues <rodrigues.gesley@gmail.com>
     */
    public function retornaSqlRestauracaoLogica($chaves) {
        // Trata a chave primária (ou composta)
        $preempenhos = $this->separaChave($chaves);

        // Restaura um ou mais registros
        $sql = "
UPDATE
    CEO_TB_PRMP_PREEMPENHO
SET
    PRMP_CD_MATRICULA_EXCLUSAO          = Null,
    PRMP_DT_EXCLUSAO_LOGICA             = Null
WHERE
    PRMP_ID_PREEMPENHO                      IN ( $preempenhos ) AND
    PRMP_DT_EXCLUSAO_LOGICA             IS NOT Null
                ";

        // Devolve a sql para restauração da registros logicamente excluídos
        return $sql;
    }

    /**
     * Retorna opções para confecção do objeto grid padrão
     *
     * @return array
     * @author Gesley B. Rodrigues <rodrigues.gesley@gmail.com>
     */
    public function retornaOpcoesGrid() {
        // Personaliza a exibição dos campos no grid
        $detalhes = array(
            'PRMP_ID_PREEMPENHO' => array('title' => 'Código', 'abbr' => ''),
            'PRMP_DT_ANO' => array('title' => 'Ano', 'abbr' => ''),
            'PRMP_CD_UG_OPERADOR' => array('title' => 'UG', 'abbr' => ''),
            'PRMP_CD_NOTA_EMPENHO' => array('title' => 'Pré Empenho', 'abbr' => ''),
            'PRMP_CD_DESPESA' => array('title' => 'Despesa', 'abbr' => ''),
            'PRMP_CD_PT_RESUMIDO' => array('title' => 'PTRES', 'abbr' => ''),
            'PRMP_CD_ELEMENTO_DESPESA_SUB' => array('title' => 'Natureza da despesa', 'abbr' => ''),
            'PRMP_DT_EMISSAO' => array('title' => 'Emissão', 'abbr' => ''),
            'PRMP_DS_DESCRICAO' => array('title' => 'Descrição', 'abbr' => ''),
            'PRMP_CD_PROCESSO' => array('title' => 'Processo', 'abbr' => ''),
            'PRMP_CD_EVENTO' => array('title' => 'Evento', 'abbr' => ''),
            'PRMP_VL_VALOR' => array('title' => 'Valor', 'abbr' => '', 'format' => 'Numerocor', 'class' => 'valorgrid'),
            'PRMP_IC_ACERTADO_MANUALMENTE' => array('title' => 'Acertado manualmente', 'abbr' => '')
        );

        // Combina as opções num array
        $opcoes ['detalhes'] = $detalhes;
        $opcoes ['controle'] = $this->_negocio;
        $opcoes ['ocultos'] = array('CAMPO_NAO_EXISTENTE');

        // Devolve o array de opções
        return $opcoes;
    }

    public function transformaArquivo($arquivo) {
        $converte = file($arquivo["TEXTO"]["tmp_name"], FILE_IGNORE_NEW_LINES);
        return $converte;
    }

    // Retorna um array de eventos dipsoniveis no sistema
    public function retornaEventos() {
        $arrayEventos[] = "";
        $modelEventos = new Trf1_Orcamento_Negocio_Evento();
        $eventos = $modelEventos->retornaListagem();

        foreach ($eventos as $ev) {
            $arrayEventos[] = $ev["EVEN_CD_EVENTO"];
        }
        return $arrayEventos;
    }

    public function verificaEvento($evento, $arrayEventos) {
        if (!in_array($evento, $arrayEventos)) {
            $evento = "";
        }
        return $evento;
    }

    /**
     * configura o campo fonte
     * @param string $fonte
     * @return string
     */
    public function trataFonte($fonte) {
        return rtrim($fonte, "0");
    }

    /**
     * Configura o valor
     * @param  float $valor
     * @return float type
     */
    public function trataValor($valor) {
        $util = new Trf1_Orcamento_Valor ();
        return $util->formataMoedaOrcamento($valor);
    }

    /**
     * configura a despesa
     * @param string $strDespesa
     * @return string
     */
    public function trataDespesa($strDespesa) {
        $validardo = strripos($strDespesa, "RDO");
        if ($validardo === false) {
            return "";
        }

        $separador = strpos($strDespesa, ".");
        $strRdo = substr($strDespesa, 0, $separador);
        return preg_replace("/[^0-9]/", "", $strRdo);
    }

    /**
     * configura a string processo
     * @param string $strProcesso
     * @return string
     */
    public function montaProcesso($strProcesso) {
        // verifica se tem o numero PASEI no processo
        $pasei = strstr($strProcesso, "PASEI");
        if (!$pasei) {
            return "";
        }

        $novoprocesso = substr($pasei, 6, 25);
        return str_replace(array("-", "."), "", $novoprocesso);
    }

    /**
     * 
     * @param array $preemp
     * @return type
     */
    public function verificaExistencia($preemp) {
        $facade = new Orcamento_Facade_Preempenho ();
        return $facade->verificaExistencia($preemp["PRMP_CD_NOTA_EMPENHO"]);
    }
    
    /**
     * deleta preempenho que ja existam no sistema
     * @param array $preemp
     * @return type
     */
    public function deletaExistentes($preemp) {
        $facade = new Orcamento_Facade_Preempenho ();
        return $facade->deletaExistentes($preemp);
    }

    /*
     * bug fix paara data
     */
    public function formataData($data, $somenteano = null) {
        // 2015 01 19 1427
        $ano = substr($data, 0, 4);
        $mes = substr($data, 4, 2);
        $dia = substr($data, 6, 2);
        $hora = substr($data, 8, 2);
        $mint = substr($data, 10, 2);

        if (!$somenteano) {
            $data = new Zend_Db_Expr("TO_DATE('" . $dia . "/" . $mes . "/" . $ano . " " . $hora . ":" . $mint . ":00','DD/MM/YYYY HH24:MI:SS')");
        } else {
            $data = new Zend_Db_Expr("TO DATE ('" . $ano . "' , 'Y')");
        }

        return $data;
    }

    /**
     * Retorna array contendo as ids para uso no cache
     *
     * @return string array
     * @author Gesley B. Rodrigues <rodrigues.gesley@gmail.com>
     */
    public function retornaCacheIds($acao = null) {
        // Instancia o cache
        $cache = new Trf1_Cache ();

        // Retorna o nome negocial
        $negocio = $this->_negocio;

        // Id para listagem
        $id ['index'] = $cache->retornaID_Listagem('orcamento', $negocio);

        // Id para combo
        $id ['combo'] = $cache->retornaID_Combo('orcamento', $negocio);

        // Determina qual valor será retornado
        $retorno = ( $acao != null ? $id [$acao] : $id );

        // Devolve o id, conforme $acao informada
        return $retorno;
    }

}
